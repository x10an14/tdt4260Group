# -*- mode:python -*-

# Copyright (c) 2006 The Regents of The University of Michigan
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Nathan Binkert

Import('*')

if env['CP_ANNOTATE']:
    SimObject('CPA.py')
    Source('cp_annotate.cc')
Source('atomicio.cc')
Source('bigint.cc')
Source('callback.cc')
Source('circlebuf.cc')
Source('cprintf.cc')
Source('crc.cc')
Source('debug.cc')
Source('fast_alloc.cc')
if env['USE_FENV']:
    Source('fenv.c')
Source('fifo_buffer.cc')
Source('hostinfo.cc')
Source('hybrid_pred.cc')
Source('inet.cc')
Source('inifile.cc')
Source('intmath.cc')
Source('match.cc')
Source('misc.cc')
Source('output.cc')
Source('pollevent.cc')
Source('random.cc')
Source('random_mt.cc')
Source('range.cc')
Source('remote_gdb.cc')
Source('sat_counter.cc')
Source('socket.cc')
Source('statistics.cc')
Source('str.cc')
Source('time.cc')
Source('trace.cc')
Source('userinfo.cc')

Source('compression/lzss_compression.cc')

Source('loader/aout_object.cc')
Source('loader/ecoff_object.cc')
Source('loader/elf_object.cc')
Source('loader/hex_file.cc')
Source('loader/object_file.cc')
Source('loader/raw_object.cc')
Source('loader/symtab.cc')

Source('stats/output.cc')
Source('stats/text.cc')
Source('stats/visit.cc')

if env['USE_MYSQL']:
    Source('mysql.cc')
    Source('stats/mysql.cc')

TraceFlag('Annotate', "State machine annotation debugging")
TraceFlag('AnnotateQ', "State machine annotation queue debugging")
TraceFlag('AnnotateVerbose', "Dump all state machine annotation details")
TraceFlag('GDBAcc', "Remote debugger accesses")
TraceFlag('GDBExtra', "Dump extra information on reads and writes")
TraceFlag('GDBMisc', "Breakpoints, traps, watchpoints, etc.")
TraceFlag('GDBRead', "Reads to the remote address space")
TraceFlag('GDBRecv', "Messages received from the remote application")
TraceFlag('GDBSend', "Messages sent to the remote application")
TraceFlag('GDBWrite', "Writes to the remote address space")
TraceFlag('SQL', "SQL queries sent to the server")
TraceFlag('StatEvents', "Statistics event tracking")

CompoundFlag('GDBAll',
    [ 'GDBMisc', 'GDBAcc', 'GDBRead', 'GDBWrite', 'GDBSend', 'GDBRecv',
      'GDBExtra' ],
    desc="All Remote debugging flags")
CompoundFlag('AnnotateAll', ['Annotate', 'AnnotateQ', 'AnnotateVerbose'],
    desc="All Annotation flags")

