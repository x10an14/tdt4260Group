
/*
 * Copyright (c) 1999-2005 Mark D. Hill and David A. Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * $Id$
 *
 */

// CoherenceRequestType
enumeration(CoherenceRequestType, desc="...") {
  GET_INSTR, desc="Get Instruction";
  GETS,      desc="Get Shared";
  GETX,      desc="Get eXclusive";
  PUTX,      desc="Put eXclusive";
}

// AddressMsg
structure(AddressMsg, desc="...", interface="NetworkMessage") {
  Address Address,       desc="Physical address for this request";
  CoherenceRequestType Type, desc="Type of request (GetS, GetX, PutX, etc)";
  int CacheState, default="1000", desc="Hack to transfer the cache's state for profiling"; // The default of 1000 will generate an error if we forget to set this
  MachineID Requestor,     desc="Node who initiated the request";
  NetDest Destination,           desc="Multicast destination mask";
  DataBlock DataBlk,         desc="data for the cache line";  // This is used for PutX and Downgrades only
  MessageSizeType MessageSize, desc="size category of the message";
}

// DataMsg
structure(DataMsg, desc="...", interface="NetworkMessage") {
  Address Address,       desc="Physical address for this request";
  MachineID Sender,        desc="Node who sent the data";
  //  MachineType SenderType,    desc="Component who sent data";
  NetDest Destination,           desc="Node to whom the data is sent";
  MachineType DestMachine,   desc="What component receives the data";
  DataBlock DataBlk,         desc="data for the cache line";
  MessageSizeType MessageSize, desc="size category of the message";
}

GenericRequestType convertToGenericType(CoherenceRequestType type) {
  if(type == CoherenceRequestType:PUTX) {
    return GenericRequestType:PUTX;
  } else if(type == CoherenceRequestType:GETS) {
    return GenericRequestType:GETS;
  } else if(type == CoherenceRequestType:GET_INSTR) {
    return GenericRequestType:GET_INSTR;
  } else if(type == CoherenceRequestType:GETX) {
    return GenericRequestType:GETX;
  } else {
    DEBUG_EXPR(type);
    error("invalid CoherenceRequestType");
  }
}

