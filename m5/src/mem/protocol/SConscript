# -*- mode:python -*-

# Copyright (c) 2009 The Hewlett-Packard Development Company
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Nathan Binkert

import os
import sys

from os.path import isdir, isfile, join as joinpath

Import('*')

if not env['RUBY']:
    Return()

protocol_dir = Dir('.')
html_dir = Dir('html')
slicc_dir = Dir('../slicc')

sys.path[1:1] = [ Dir('..').srcnode().abspath ]
from slicc.parser import SLICC

slicc_depends = []
for root,dirs,files in os.walk(slicc_dir.srcnode().abspath):
    for f in files:
        if f.endswith('.py'):
            slicc_depends.append(File(joinpath(root, f)))

#
# Use SLICC
#

def slicc_scanner(node, env, path):
    contents = node.get_contents()
    files = [ line.strip() for line in contents.splitlines() if line ]
    return files

env.Append(SCANNERS=Scanner(function=slicc_scanner,skeys=['.slicc']))

def slicc_emitter(target, source, env):
    protocol = source[0].get_contents()
    files = [s.srcnode().abspath for s in source[1:]]
    slicc = SLICC(protocol, debug=True)
    print "SLICC parsing..."
    for name in slicc.load(files, verbose=True):
        print "    %s" % name

    target.extend(sorted(slicc.files()))
    pdir = str(protocol_dir)
    hdir = str(html_dir)

    if not isdir(pdir):
        os.mkdir(pdir)
    if not isdir(hdir):
        os.mkdir(hdir)

    print "SLICC Generator pass 1..."
    slicc.findMachines()

    print "SLICC Generator pass 2..."
    slicc.generate()

    print "SLICC writing C++ files..."
    slicc.writeCodeFiles(pdir)

    if env['NO_HTML']:
        print "skipping HTML file creation"
    else:
        print "SLICC writing HTML files..."
        slicc.writeHTMLFiles(hdir)
    return target, source

def slicc_action(target, source, env):
    protocol = source[0].get_contents()
    pdir = str(protocol_dir)
    hdir = str(html_dir)

    if not isdir(pdir):
        os.mkdir(pdir)
    if not isdir(hdir):
        os.mkdir(hdir)

    slicc = SLICC(protocol, debug=True)
    files = [str(s) for s in source[1:]]
    slicc.load(files, verbose=False)

    print "SLICC Generator pass 1..."
    slicc.findMachines()

    print "SLICC Generator pass 2..."
    slicc.generate()

    print "SLICC writing C++ files..."
    slicc.writeCodeFiles(pdir)

    if env['NO_HTML']:
        print "skipping HTML file creation"
    else:
        print "SLICC writing HTML files..."
        slicc.writeHTMLFiles(hdir)

slicc_builder = Builder(action=slicc_action, emitter=slicc_emitter)

protocol = env['PROTOCOL']
sources = [ protocol_dir.File("RubySlicc_interfaces.slicc"),
            protocol_dir.File("%s.slicc" % protocol) ]

env.Append(BUILDERS={'SLICC' : slicc_builder})
nodes = env.SLICC([], [ Value(protocol) ] + sources)
env.Depends(nodes, slicc_depends)

for f in nodes:
    s = str(f)
    if s.endswith('.cc'):
        Source(f)
    elif s.endswith('.py'):
        SimObject(f)

